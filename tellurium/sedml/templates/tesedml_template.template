{% import 'macros_helpers.template' as helpers %}
"""
    tellurium {{ version }}

    auto-generated code
    sedmlDoc: L{{ doc.getLevel() }}V{{ doc.getVersion() }} {% if doc.isSetId() %}id={{ doc.getId() }} {% endif %} {% if doc.isSetName() %}name={{ doc.getName() }}{% endif %}

    workingDir: {{ factory.workingDir }}
    inputType: {{ factory.inputType }}
"""
import tellurium as te
from roadrunner import Config
from tellurium.sedml.mathml import *
from tellurium.sedml.tesedml import process_trace
import numpy as np
import matplotlib.pyplot as plt
import mpl_toolkits.mplot3d
import tesedml as libsedml
import pandas
import os.path
Config.LOADSBMLOPTIONS_RECOMPILE = True

def main():
    workingDir = r'{{ factory.workingDir }}'

    {{ helpers.heading(doc.getListOfModels(), 'Model') | indent(4,False) }}
    {% for model in doc.getListOfModels() %}
    # Model <{{ model.getId() }}>
    {{ modelToPython(model) | indent(4,False) }}
    {% endfor %}

    {{ helpers.heading(doc.getListOfTasks(), 'Task') | indent(4,False) }}
    {% for task in doc.getListOfTasks() %}
    # Task <{{ task.getId() }}>
    {{ taskToPython(factory.doc, task) | indent(4,False) }}

    {% endfor %}
    {{ helpers.heading(doc.getListOfDataGenerators(), 'DataGenerator') | indent(4,False) }}
    {% for dg in doc.getListOfDataGenerators() %}
    # DataGenerator <{{ dg.getId() }}>
    {{ dataGeneratorToPython(factory.doc, dg) | indent(4,False) }}

    {% endfor %}
    {{ helpers.heading(doc.getListOfOutputs(), 'Output') | indent(4,False) }}
    {% for out in doc.getListOfOutputs() %}
    # Output <{{ out.getId() }}>
    {{ outputToPython(factory.doc, out) | indent(4,False) }}

    {% endfor %}
